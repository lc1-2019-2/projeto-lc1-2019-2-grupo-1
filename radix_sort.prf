(radix_sort
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3780241909
   ("" (skolem!)
    (("" (expand "radixsort")
      (("" (lemma "merge_sort_is_permutation[T, <=]" ("l" "l!1"))
        ((""
          (lemma "merge_sort_is_permutation[T, <<]"
           ("l" "merge_sort[T, <=](l!1)"))
          ((""
            (lemma "permutations_is_transitive"
             ("l" "merge_sort[T, <<](merge_sort[T, <=](l!1))" "l1"
              "merge_sort[T, <=](l!1)" "l2" "l!1"))
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((radixsort const-decl "list[T]" radix_sort nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (permutations_is_transitive formula-decl nil sorting_aux nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil radix_sort nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   shostak))
 (radixsort_sorts_TCC1 0
  (radixsort_sorts_TCC1-1 nil 3777655189
   ("" (typepred "<<" "<=")
    (("" (expand "total_preorder?")
      (("" (expand "preorder?")
        (("" (prop)
          (("1" (hide -2 -3 -5 -6) (("1" (grind) nil nil)) nil)
           ("2" (expand "lex")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (copy -4)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -6)
                                  (("1"
                                    (inst -6 "y_1" "z" "x_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (copy -6)
                            (("2" (expand "transitive?" -1)
                              (("2"
                                (inst -1 "x_1" "y_1" "z")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "transitive?" -8)
                                    (("2"
                                      (inst -8 "y_1" "z" "x_1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (copy -6)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -8)
                                  (("1"
                                    (inst -8 "z" "x_1" "y_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (copy -8)
                        (("2" (expand "transitive?" -1)
                          (("2" (inst -1 "x_1" "y_1" "z")
                            (("2" (assert)
                              (("2"
                                (expand "transitive?" -13)
                                (("2"
                                  (inst -13 "x_1" "y_1" "z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "lex")
            (("3" (expand "dichotomous?" 1)
              (("3" (skeep)
                (("3" (hide -2 -5)
                  (("3" (copy -2)
                    (("3" (copy -5)
                      (("3" (expand "dichotomous?" -2)
                        (("3" (inst?)
                          (("3" (prop)
                            (("1" (expand "dichotomous?" -4)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "dichotomous?" -4)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex const-decl "bool" radix_sort nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   nil))
 (radixsort_sorts 0
  (radixsort_sorts-1 nil 3780418313
   ("" (skolem!)
    (("" (expand "is_sorted?")
      (("" (skolem!)
        (("" (flatten)
          (("" (expand "lex")
            (("" (flatten)
              ((""
                (case "NOT (nth(radixsort(l!1), 1 + k!1) << nth(radixsort(l!1), k!1))")
                (("1"
                  (lemma "merge_sort_is_sorted[T, <<]"
                   ("l" "merge_sort[T, <=](l!1)"))
                  (("1" (expand "is_sorted?" -1)
                    (("1" (inst -1 "k!1")
                      (("1" (expand "radixsort" -2)
                        (("1" (assert)
                          (("1" (expand "radixsort" 2)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "radixsort")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "merge_sort_is_sorted[T, <<]"
                   ("l" "merge_sort[T, <=](l!1)"))
                  (("2" (expand "is_sorted?" -1)
                    (("2" (inst -1 "k!1")
                      (("1" (hide 1)
                        (("1" (expand "radixsort" -3)
                          (("1" (assert)
                            (("1"
                              (lemma "merge_sort_is_conservative[T,<<]"
                               ("l"
                                "merge_sort[T, <=](l!1)"
                                "m"
                                "k!1"
                                "n"
                                "1 +k!1"))
                              (("1"
                                (assert)
                                (("1"
                                  (expand "radixsort" -3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -3 -4)
                                      (("1"
                                        (expand "radixsort" 1)
                                        (("1"
                                          (hide -2)
                                          (("1"
                                            (skolem!)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "merge_sort_is_sorted[T, <=]"
                                                 ("l" "(l!1)"))
                                                (("1"
                                                  (replaces -3)
                                                  (("1"
                                                    (replaces -3)
                                                    (("1"
                                                      (lemma
                                                       "is_sorted_implies_monotone[T, <=]"
                                                       ("l"
                                                        "merge_sort[T, <=](l!1)"))
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "j!1"
                                                           "i!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "radixsort" -2)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex const-decl "bool" radix_sort nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (radixsort const-decl "list[T]" radix_sort nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (T formal-type-decl nil radix_sort nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (k!1 skolem-const-decl "below[length(radixsort(l!1))]" radix_sort
     nil)
    (l!1 skolem-const-decl "list[T]" radix_sort nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (merge_sort_is_sorted formula-decl nil mergesort nil)
    (is_sorted_implies_monotone formula-decl nil sorting nil)
    (merge_sort_is_conservative formula-decl nil mergesort nil)
    (is_sorted? const-decl "bool" sorting nil))
   shostak)))

